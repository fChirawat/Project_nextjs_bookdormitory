import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';

// üîê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ JWT Secret Key ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
const SECRET_KEY = process.env.JWT_SECRET_KEY;
if (!SECRET_KEY) {
  throw new Error('‚ùå JWT_SECRET_KEY is missing in environment variables!');
}

export async function POST(req: NextRequest) {
  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Header ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    const authHeader = req.headers.get('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: '‚ùå Missing or invalid token, please login.' }, { status: 401 });
    }

    const token = authHeader.split(' ')[1];

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Token
    const SECRET_KEY = process.env.JWT_SECRET_KEY || 'default-secret-key';

        if (!SECRET_KEY) {
           throw new Error('üö® SECRET_KEY is missing. Please set JWT_SECRET_KEY in your environment variables.');
    }
    const decoded = jwt.verify(token, SECRET_KEY);
    console.log("üîê Token decoded:", decoded);

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Request Body
    const body = await req.json();
    const { title, firstname, lastname, email, phoneNumber, contactInfo, address, profileImage } = body;

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!firstname || !lastname || !email) {
      return NextResponse.json({ error: '‚ùå Missing required fields.' }, { status: 400 });
    }

    console.log("üì¶ Received Data:", body);

    // üîó ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
    // Example: await db.collection('profiles').insertOne({ title, firstname, lastname, email, phoneNumber, contactInfo, address, profileImage });

    return NextResponse.json({ message: '‚úÖ Profile successfully saved!', data: body }, { status: 200 });

  } catch (error: any) {
    console.error("üî• Error:", error);

    if (error.name === 'JsonWebTokenError') {
      return NextResponse.json({ error: '‚ùå Invalid token, please login again.' }, { status: 401 });
    }

    return NextResponse.json({ error: '‚ùå Internal Server Error' }, { status: 500 });
  }
}