"use client";

import { useState, useEffect } from "react";
import Link from "next/link";

interface Room {
  roomNumber: string;
  isAvailable: boolean;
}

export default function BookDormitory() {
  const [firstName, setFirstName] = useState<string>("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  const [lastName, setLastName] = useState<string>("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  const [phoneNumber, setPhoneNumber] = useState<string>("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  const [email, setEmail] = useState<string>("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  const [error, setError] = useState<string>("");
  const [selectedRoom, setSelectedRoom] = useState<string | null>(null);
  const [rooms, setRooms] = useState<Room[]>([]);
  const [isRoomAvailable, setIsRoomAvailable] = useState<boolean | undefined>(undefined);
  const [isChecking, setIsChecking] = useState(false);

  const dormitory = {
    nameDormitory: "üåø ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏™‡∏ß‡∏ô‡∏™‡∏ß‡∏¢",
    photoDormitory: "https://via.placeholder.com/800x400?text=‡∏£‡∏π‡∏õ‡∏´‡∏≠‡∏û‡∏±‡∏Å",
    addressDormitory: "123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø",
    priceOther:"‡πÑ‡∏°‡πà‡∏°‡∏µ",
    priceWater: "100‡∏ö‡∏≤‡∏ó‡πÄ‡∏´‡∏°‡∏≤‡∏à‡πà‡∏≤‡∏¢",
    priceElectricity: "9‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢",
    roomDeposit: "5‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó",
    dormitoryDetails: "‡∏´‡∏∂",
    priceMonth: 5000,
  };

  const [formData, setFormData] = useState({
    firstname: "",
    lastname: "",
    email: "",
    phoneNumber: "",
    address: "",
    accountNumber: "",
    contactInfo: "",
    phoneRelationship: "",
    relationship: "",
    checkInDate: "",
    specialRequest: "",
  });

   useEffect(() => {
      const fetchUserData = async () => {
        try {
          const response = await fetch("/api/fromsell", {
            method: "GET",
            credentials: "include",
          });
  
          if (!response.ok) {
            throw new Error("Failed to fetch user data");
          }
  
          const data = await response.json();
  
          if (data.success) {
            const user = data.user;
            setUserId(user.userId || null);
            setTitle(user.title || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            setFirstName(user.firstName || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            setLastName(user.lastName || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            setPhoneNumber(user.phoneNumber || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            setEmail(user.email || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
          } else {
            setError("Error fetching user: " + data.message);
          }
        } catch (error) {
          setError("Error fetching user data");
        }
      };
  
      fetchUserData();
    }, []);
  

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectRoom = (roomNumber: string) => {
    setSelectedRoom((prev) => (prev === roomNumber ? null : roomNumber));
  };

  const handleCheckAvailability = () => {
    setIsChecking(true);
    const mockRooms: Room[] = Array.from({ length: 8 }, (_, i) => ({
      roomNumber: `‡∏´‡πâ‡∏≠‡∏á ${i + 1}`,
      isAvailable: Math.random() > 0.5,
    }));

    setTimeout(() => {
      setRooms(mockRooms);
      const available = mockRooms.some((room) => room.isAvailable);
      setIsRoomAvailable(available);
      setIsChecking(false);
    }, 1000);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!isRoomAvailable) {
      alert("‚ùå ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà");
      return;
    }
    alert(`‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ${formData.firstname} ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤!`);
  };

  return (
    <div className="container mx-auto p-6 max-w-3xl bg-white shadow-2xl rounded-3xl">
      <h1 className="text-4xl font-extrabold text-gray-800 text-center mb-6">
        ‡∏à‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
      </h1>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-lg font-semibold mb-2">üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
          <input
            type="text"
            name="firstname"
            value={formData.firstname}
            onChange={handleChange}
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2">üë§ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
          <input
            type="text"
            name="lastname"
            value={formData.lastname}
            onChange={handleChange}
            placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2">üë§ email </label>
          <input
            type="text"
            name="email"
            value={formData.email}
            onChange={handleChange}
            placeholder="email"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2">üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
          <input
            type="tel"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleChange}
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2">üë§ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà </label>
          <input
            type="text"
            name="address"
            value={formData.address}
            onChange={handleChange}
            placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ </label>
          <input
            type="text"
            name="accountNumber"
            value={formData.accountNumber}
            onChange={handleChange}
            placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2"> Facebook / Line </label>
          <input
            type="text"
            name="contactInfo"
            value={formData.contactInfo}
            onChange={handleChange}
            placeholder="Facebook / Line"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2"> ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ </label>
          <input
            type="text"
            name="phoneRelationship"
            value={formData.phoneRelationship}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2"> ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå </label>
          <input
            type="text"
            name="relationship"
            value={formData.relationship}
            onChange={handleChange}
            placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå"
            required
            className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </div>

        <div>
          <label className="block text-lg font-semibold mb-2">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å</label>
          <div className="flex space-x-4 items-center">
            <input
              type="date"
              name="checkInDate"
              value={formData.checkInDate}
              onChange={handleChange}
              required
              className="w-full px-4 py-3 border rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-400"
            />
            <button
              type="button"
              onClick={handleCheckAvailability}
              className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded-2xl shadow-lg transition-transform transform hover:scale-105"
              disabled={isChecking}
            >
              {isChecking ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö..." : "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á"}
            </button>
          </div>

          {rooms.length > 0 && (
            <div className="mt-4">
              <h2 className="text-lg font-semibold mb-2">üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏´‡πâ‡∏≠‡∏á)</h2>
              {rooms.map((room) => (
                <div key={room.roomNumber} className="flex justify-between items-center p-3 bg-gray-100 rounded-2xl">
                  <p>{room.roomNumber}</p>
                  <p className={room.isAvailable ? "text-green-500" : "text-red-500"}>
                    {room.isAvailable ? "‚úÖ ‡∏ß‡πà‡∏≤‡∏á" : "‚ùå ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á"}
                  </p>
                  <button
                    disabled={!room.isAvailable || (selectedRoom && selectedRoom !== room.roomNumber)}
                    onClick={() => handleSelectRoom(room.roomNumber)}
                    className={`${
                      selectedRoom === room.roomNumber
                        ? "bg-green-600"
                        : "bg-blue-500 hover:bg-blue-600"
                    } text-white px-4 py-2 rounded-2xl`}
                  >
                    {selectedRoom === room.roomNumber ? "‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß" : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ"}
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
        <h2 className="text-lg font-semibold mb-2">üìã‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏≠‡∏û‡∏±‡∏Å</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        <div className="space-y-4">
          <p className="text-lg">
            üìç <strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> {dormitory.addressDormitory}
          </p>
          <p>üí∏ <strong>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</strong> {dormitory.priceMonth} ‡∏ö‡∏≤‡∏ó</p>
          <p>üöø <strong>‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥:</strong> {dormitory.priceWater} ‡∏ö‡∏≤‡∏ó</p>
          <p>‚ö° <strong>‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü:</strong> {dormitory.priceElectricity} ‡∏ö‡∏≤‡∏ó</p>
          <p>üí∞ <strong>‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥:</strong> {dormitory.roomDeposit} ‡∏ö‡∏≤‡∏ó</p>
          <p>üìù <strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong> {dormitory.dormitoryDetails}</p>
        </div>
      </div>
      </div>

        <div className="flex justify-between items-center mt-8">
          <button
            type="submit"
            disabled={isRoomAvailable === false}
            className={`$${
              isRoomAvailable === false
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-green-500 hover:bg-green-600"
            } text-white px-10 py-4 rounded-2xl shadow-xl text-lg transition-transform transform hover:scale-105`}
          >
            üöÄ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          </button>
          <Link href="/main/home">
            <button
              type="button"
              className="bg-gray-300 hover:bg-gray-400 text-gray-800 px-10 py-4 rounded-2xl shadow-lg text-lg transition-transform transform hover:scale-105"
            >
              üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </button>
          </Link>
        </div>
      </form>
    </div>
  );
}
